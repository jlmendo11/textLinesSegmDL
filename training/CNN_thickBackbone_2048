{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN_thickBackbone_2048","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyNsACI9L7Y7WRzE5a0MKgx5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"O2RFeYT2K3eO","colab_type":"code","outputId":"9de22165-9f5f-4552-ae83-987ca32be257","executionInfo":{"status":"ok","timestamp":1589747031548,"user_tz":-120,"elapsed":3693,"user":{"displayName":"TFG Mendoza","photoUrl":"","userId":"01669513172031245813"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["!nvidia-smi"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Sun May 17 20:23:48 2020       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 440.82       Driver Version: 418.67       CUDA Version: 10.1     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|===============================+======================+======================|\n","|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   36C    P8    29W / 149W |      0MiB / 11441MiB |      0%      Default |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                       GPU Memory |\n","|  GPU       PID   Type   Process name                             Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qGvnq_kQ4aLr","colab_type":"text"},"source":["Si no nos gusta el que nos dan, podemos forzar el fallo y pedir un sistema nuevo\n"]},{"cell_type":"code","metadata":{"id":"GykjIN3F1XEv","colab_type":"code","colab":{}},"source":["#a = [1]\n","#while True:\n","#  a = [a, a]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"p6w4F3dQEKGI","colab_type":"text"},"source":["Para que se puedan coger los archivos que tenemos en el drive, tenemos que montar la unidad"]},{"cell_type":"code","metadata":{"id":"AFhKlGCtEVnQ","colab_type":"code","outputId":"de520922-e989-43b8-cfba-8055536b1a4d","executionInfo":{"status":"ok","timestamp":1589747061272,"user_tz":-120,"elapsed":33341,"user":{"displayName":"TFG Mendoza","photoUrl":"","userId":"01669513172031245813"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sZys31rfEy2c","colab_type":"code","colab":{}},"source":["import sys\n","sys.path.append('/content/gdrive/My Drive/Colab Notebooks')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KZJv_eBY7fFW","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"QveOlMDEEYaL","colab_type":"text"},"source":["Ahora ya los siguientes imports no deberian de dar problemas"]},{"cell_type":"code","metadata":{"id":"fHEKSCOUEdcp","colab_type":"code","outputId":"3df688ac-6ef6-40a9-9866-8994930ec8f9","executionInfo":{"status":"ok","timestamp":1589747064335,"user_tz":-120,"elapsed":36388,"user":{"displayName":"TFG Mendoza","photoUrl":"","userId":"01669513172031245813"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import DataGen_2048_dataAug as DataGen\n","import numpy as np\n","import Unet_2048\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","from keras.callbacks import EarlyStopping, ModelCheckpoint"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"MouAJlGLFrK8","colab_type":"text"},"source":["Creamos todos los objetos necesarios para el entrenamiento"]},{"cell_type":"code","metadata":{"id":"vpnO49qdCR_e","colab_type":"code","outputId":"baa8249c-521d-40dc-d7bc-e66e8d3f467d","executionInfo":{"status":"ok","timestamp":1589747072557,"user_tz":-120,"elapsed":44602,"user":{"displayName":"TFG Mendoza","photoUrl":"","userId":"01669513172031245813"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["IMAGES_HEIGHT = 4096\n","IMAGES_WIDTH = 3072\n","\n","model = Unet_2048.UNet(2048, 1536)\n","model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"acc\"])\n","model.summary()\n","\n","# import keras\n","# import pydot\n","# import pydotplus\n","# from keras.utils.vis_utils import model_to_dot\n","# keras.utils.vis_utils.pydot = pydot\n","# from keras.utils.vis_utils import plot_model\n","# plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\n","\n","validation_size = 40\n","\n","indexes = np.arange(1, 349) # from 001 to 348\n","\n","train_indexes = indexes[:199]\n","test_indexes  = indexes[200:]\n","\n","epochs = 5000\n","batch_size = 1\n","\n","np.random.seed(42)\n","np.random.shuffle(train_indexes)\n","\n","list_validation = list(train_indexes[0:validation_size])\n","list_training = list(train_indexes[validation_size:])\n","\n","train_gen = DataGen.DataGen(list_training, batch_size=batch_size, x_path='/content/gdrive/My Drive/tfg/zigzagTensors/x',\n","                            y_path='/content/gdrive/My Drive/tfg/thickBackboneTensors/y', zig_zag = False, data_augmentation=True)\n","valid_gen = DataGen.DataGen(list_validation, batch_size=batch_size, x_path='/content/gdrive/My Drive/tfg/zigzagTensors/x', \n","                            y_path='/content/gdrive/My Drive/tfg/thickBackboneTensors/y', zig_zag = False, data_augmentation=False)\n","\n","train_steps = len(list_training)//batch_size + 1\n","valid_steps = len(list_validation)/batch_size + 1\n","\n","# But when we introduce the patience, we got a problem, since we set patience=2, we won’t get the best model, but the model two epochs after the best model.\n","earlyStoppingCallback = EarlyStopping(monitor='val_acc', mode='max', patience=3)\n","\n","# Solution: checkpoint to save the weights of the best\n","chkpoint   = ModelCheckpoint(filepath='/content/gdrive/My Drive/tfg/contest_model_thickBacbone_2048.h5'  , monitor='val_acc', mode='max', save_weights_only=True, save_best_only=True)\n","\n","callbackList   = [earlyStoppingCallback, chkpoint]\n","\n","# We save the model\n","model_json_thickBacbone = model.to_json()\n","with open(\"/content/gdrive/My Drive/tfg/zigzagTensors/contest_model_thickBackbone_2048.json\", \"w\") as json_file:\n","    json_file.write(model_json_thickBacbone)\n","\n"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_1 (InputLayer)            (None, 2048, 1536, 1 0                                            \n","__________________________________________________________________________________________________\n","conv2d_1 (Conv2D)               (None, 2048, 1536, 1 160         input_1[0][0]                    \n","__________________________________________________________________________________________________\n","conv2d_2 (Conv2D)               (None, 2048, 1536, 1 2320        conv2d_1[0][0]                   \n","__________________________________________________________________________________________________\n","max_pooling2d_1 (MaxPooling2D)  (None, 1024, 768, 16 0           conv2d_2[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_3 (Conv2D)               (None, 1024, 768, 32 4640        max_pooling2d_1[0][0]            \n","__________________________________________________________________________________________________\n","conv2d_4 (Conv2D)               (None, 1024, 768, 32 9248        conv2d_3[0][0]                   \n","__________________________________________________________________________________________________\n","max_pooling2d_2 (MaxPooling2D)  (None, 512, 384, 32) 0           conv2d_4[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_5 (Conv2D)               (None, 512, 384, 64) 18496       max_pooling2d_2[0][0]            \n","__________________________________________________________________________________________________\n","conv2d_6 (Conv2D)               (None, 512, 384, 64) 36928       conv2d_5[0][0]                   \n","__________________________________________________________________________________________________\n","max_pooling2d_3 (MaxPooling2D)  (None, 256, 192, 64) 0           conv2d_6[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_7 (Conv2D)               (None, 256, 192, 128 73856       max_pooling2d_3[0][0]            \n","__________________________________________________________________________________________________\n","conv2d_8 (Conv2D)               (None, 256, 192, 128 147584      conv2d_7[0][0]                   \n","__________________________________________________________________________________________________\n","max_pooling2d_4 (MaxPooling2D)  (None, 128, 96, 128) 0           conv2d_8[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_9 (Conv2D)               (None, 128, 96, 256) 295168      max_pooling2d_4[0][0]            \n","__________________________________________________________________________________________________\n","conv2d_10 (Conv2D)              (None, 128, 96, 256) 590080      conv2d_9[0][0]                   \n","__________________________________________________________________________________________________\n","up_sampling2d_1 (UpSampling2D)  (None, 256, 192, 256 0           conv2d_10[0][0]                  \n","__________________________________________________________________________________________________\n","concatenate_1 (Concatenate)     (None, 256, 192, 384 0           up_sampling2d_1[0][0]            \n","                                                                 conv2d_8[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_11 (Conv2D)              (None, 256, 192, 128 442496      concatenate_1[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_12 (Conv2D)              (None, 256, 192, 128 147584      conv2d_11[0][0]                  \n","__________________________________________________________________________________________________\n","up_sampling2d_2 (UpSampling2D)  (None, 512, 384, 128 0           conv2d_12[0][0]                  \n","__________________________________________________________________________________________________\n","concatenate_2 (Concatenate)     (None, 512, 384, 192 0           up_sampling2d_2[0][0]            \n","                                                                 conv2d_6[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_13 (Conv2D)              (None, 512, 384, 64) 110656      concatenate_2[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_14 (Conv2D)              (None, 512, 384, 64) 36928       conv2d_13[0][0]                  \n","__________________________________________________________________________________________________\n","up_sampling2d_3 (UpSampling2D)  (None, 1024, 768, 64 0           conv2d_14[0][0]                  \n","__________________________________________________________________________________________________\n","concatenate_3 (Concatenate)     (None, 1024, 768, 96 0           up_sampling2d_3[0][0]            \n","                                                                 conv2d_4[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_15 (Conv2D)              (None, 1024, 768, 32 27680       concatenate_3[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_16 (Conv2D)              (None, 1024, 768, 32 9248        conv2d_15[0][0]                  \n","__________________________________________________________________________________________________\n","up_sampling2d_4 (UpSampling2D)  (None, 2048, 1536, 3 0           conv2d_16[0][0]                  \n","__________________________________________________________________________________________________\n","concatenate_4 (Concatenate)     (None, 2048, 1536, 4 0           up_sampling2d_4[0][0]            \n","                                                                 conv2d_2[0][0]                   \n","__________________________________________________________________________________________________\n","conv2d_17 (Conv2D)              (None, 2048, 1536, 1 6928        concatenate_4[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_18 (Conv2D)              (None, 2048, 1536, 1 2320        conv2d_17[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_19 (Conv2D)              (None, 2048, 1536, 1 17          conv2d_18[0][0]                  \n","==================================================================================================\n","Total params: 1,962,337\n","Trainable params: 1,962,337\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KBmPwrSnF4vX","colab_type":"text"},"source":["Entrenamos a la red"]},{"cell_type":"code","metadata":{"id":"RKyDuDz2F6lO","colab_type":"code","outputId":"a75cfd19-e303-4b68-c77d-dabc92691a72","executionInfo":{"status":"error","timestamp":1589747106952,"user_tz":-120,"elapsed":78989,"user":{"displayName":"TFG Mendoza","photoUrl":"","userId":"01669513172031245813"}},"colab":{"base_uri":"https://localhost:8080/","height":459}},"source":["\n","history = model.fit_generator(train_gen, validation_data=valid_gen, steps_per_epoch=train_steps, validation_steps=valid_steps, epochs=epochs, verbose=1, callbacks=callbackList)\n","#                   ,use_multiprocessing=True, workers=1, max_queue_size=2)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Epoch 1/5000\n"],"name":"stdout"},{"output_type":"error","ename":"ResourceExhaustedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mResourceExhaustedError\u001b[0m                    Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-fbfa1212e914>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_gen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalid_gen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_steps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalid_steps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbackList\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m#                   ,use_multiprocessing=True, workers=1, max_queue_size=2)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   1730\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1731\u001b[0m             \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1732\u001b[0;31m             initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   1733\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m    218\u001b[0m                                             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m                                             \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                                             reset_metrics=False)\n\u001b[0m\u001b[1;32m    221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics)\u001b[0m\n\u001b[1;32m   1512\u001b[0m             \u001b[0mins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0msample_weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1514\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1515\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1516\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mreset_metrics\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3790\u001b[0m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmath_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3791\u001b[0m       \u001b[0mconverted_inputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3792\u001b[0;31m     \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_graph_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mconverted_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3793\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3794\u001b[0m     \u001b[0;31m# EagerTensor.numpy() will often make a copy to ensure memory safety.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1603\u001b[0m       \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mFor\u001b[0m \u001b[0minvalid\u001b[0m \u001b[0mpositional\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mkeyword\u001b[0m \u001b[0margument\u001b[0m \u001b[0mcombinations\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1604\u001b[0m     \"\"\"\n\u001b[0;32m-> 1605\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1607\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1643\u001b[0m       raise TypeError(\"Keyword arguments {} unknown. Expected {}.\".format(\n\u001b[1;32m   1644\u001b[0m           list(kwargs.keys()), list(self._arg_keywords)))\n\u001b[0;32m-> 1645\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1646\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1647\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1744\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1745\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1746\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1747\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1748\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    596\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 598\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    599\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mResourceExhaustedError\u001b[0m:  OOM when allocating tensor with shape[3,48,2048,1536] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[node gradients/conv2d_17/convolution_grad/Conv2DBackpropInput (defined at /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3009) ]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n [Op:__inference_keras_scratch_graph_4466]\n\nFunction call stack:\nkeras_scratch_graph\n"]}]},{"cell_type":"markdown","metadata":{"id":"JZmRj55hGCkR","colab_type":"text"},"source":["Analizamos el entrenamiento"]},{"cell_type":"code","metadata":{"id":"Q62kxqqXGD35","colab_type":"code","colab":{}},"source":["# Plot training & validation accuracy values\n","plt.plot(history.history['acc'])\n","plt.plot(history.history['val_acc'])\n","plt.title('Model accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Validation'], loc='upper left')\n","plt.show()\n","\n","# Plot training & validation loss values\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Validation'], loc='upper left')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8cAMNH8HF9CA","colab_type":"text"},"source":["Comprobamos el resultado con el test\n","\n","[0.06004452705383301, 0.9732664823532104] 1\n","\n","[0.06751640141010284, 0.9723555445671082] 2"]},{"cell_type":"code","metadata":{"id":"MPV3RfJHF_Go","colab_type":"code","colab":{}},"source":["model.load_weights('/content/gdrive/My Drive/tfg/contest_model_thickBacbone_2048.h5')\n","\n","batch_size_test = 3\n","list_test = list(test_indexes)\n","test_steps = len(list_test)//batch_size_test + 1\n","test_gen = DataGen.DataGen(list_test, batch_size=batch_size_test, x_path='/content/gdrive/My Drive/tfg/zigzagTensors/x',\n","                                    y_path='/content/gdrive/My Drive/tfg/thickBackboneTensors/y', zig_zag = False, data_augmentation=False)\n","\n","score = model.evaluate_generator(test_gen, steps=test_steps,verbose=1)\n","print(score)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OQb9h-FMGSlb","colab_type":"text"},"source":["Comprobamos el resultado visualmente"]},{"cell_type":"code","metadata":{"id":"8aVNDM3DGbXA","colab_type":"code","colab":{}},"source":["x_prueba= test_gen.load_single_image(313)\n","y_devuelta = x_prueba[1].astype('bool')\n","mpl.image.imsave(\"/content/gdrive/My Drive/tfg/zigzagTensors/thickBackbone_ydevuelta_2048.png\", y_devuelta.reshape(2048, 1536), cmap=mpl.cm.binary)\n","plt.figure()\n","plt.imshow(y_devuelta.reshape(2048, 1536), cmap=mpl.cm.binary)\n","plt.axis(\"off\")\n","x_prueba = x_prueba[0].astype('bool')\n","mpl.image.imsave(\"/content/gdrive/My Drive/tfg/zigzagTensors/thickBackbone_xdevuelta_2048.png\", x_prueba.reshape(2048, 1536), cmap=mpl.cm.binary)\n","plt.figure()\n","plt.imshow(x_prueba.reshape(2048, 1536), cmap=mpl.cm.binary)\n","plt.axis(\"off\")\n","y_prueba = model.predict(x_prueba.reshape(1, 2048, 1536, 1).astype('float32'))\n","\n","y_prueba = np.round(y_prueba).astype('bool')\n","\n","mpl.image.imsave(\"/content/gdrive/My Drive/tfg/zigzagTensors/thickBackbone_ypredicha_2048.png\", y_prueba.reshape(2048, 1536), cmap=mpl.cm.binary)\n","plt.figure()\n","plt.imshow(y_prueba.reshape(2048, 1536), cmap=mpl.cm.binary)\n","plt.axis(\"off\")"],"execution_count":0,"outputs":[]}]}